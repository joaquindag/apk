{"version":3,"sources":["./src/app/share/bbdd.service.ts","./src/app/share/bbddcopy.service.ts","./src/app/validators/myFormControl.ts","./src/app/validators/myformgroup.ts"],"names":[],"mappings":"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","file":"default~inicio-sesion-inicio-sesion-module~registro-registro-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';\nimport { Platform } from '@ionic/angular';\n\nimport { BbddcopyService } from './bbddcopy.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BbddService {\n\n  private db: SQLiteObject;\n  private verCorreoNick:Array<any>=[];\n  private verLogin:Array<any>=[];\n  private id:Array<any>=[];\n  private verUsers:Array<any>=[];\n  private verAmigos:Array<any>=[];\n  constructor(\n    private platform: Platform,\n    private sqlite: SQLite,\n    private copy: BbddcopyService\n  ) {}\n\n  executeSentence(target: any[], sqlSentence: string, searchParam: any[]) {\n    return new Promise<any>((resolveUno, rejectUno) => {\n      let consultable = true;\n      new Promise((resolve, reject) => {\n        if (true) {\n          this.crearBBDD()\n            .then(() => {\n              resolve(consultable);\n            })\n            .catch(() => {\n              consultable = false;\n              reject(consultable);\n            });\n        } else {\n          resolve(consultable);\n        }\n      })\n        .then((bandera) => {\n          if (bandera) {\n            console.log(sqlSentence)\n            this.db\n              .executeSql(sqlSentence, searchParam)\n              .then((data) => {\n                console.log(data);\n                for (let i = 0; i < data.rows.length; i++) {\n                  let obj = data.rows.item(i);\n                  target.push(obj);\n                  console.log(obj)\n                }\n                resolveUno(target);\n              })\n              .catch((e) => {});\n          }\n        })\n        .catch((err) => {});\n    });\n  }\n\n  getVerifyNickCorreo(nick: string,correo:string) {\n    return new Promise<any>((resolveUno, rejectUno) => {\n      const sql = `Select count(*) as registry\n                   from Persona\n                   where Persona.Correo= \"${correo}\" or Persona.Nick= \"${nick}\"`\n      this.verCorreoNick=[];\n      this.executeSentence(this.verCorreoNick, sql, []).then((data)=>{resolveUno(data)}).catch();\n    })\n  }\n\n  getLogin(nick: string,password:string) {\n    return new Promise<any>((resolveUno, rejectUno) => {\n      const sql = `Select count(*) as logeo\n                 from Persona \n                 where Persona.Nick= \"${nick}\" and Persona.Password= \"${password}\"`\n      this.verLogin=[];\n      this.executeSentence(this.verLogin, sql, []).then((data)=>{resolveUno(data)}).catch();\n    })\n  }\n\n\n  crearRegistro(nombre:string,apellido:string,correo:string,nick:string, telefono:string, password:string) {\n    const sql =\n      \"INSERT INTO Persona (Nombre, Apellido, Correo, Nick, Telefono, Password) VALUES (?,?,?,?,?,?);\";\n    return this.executeSentence([], sql, [nombre, apellido,correo,nick,telefono,password]);\n  }\n\n\n  crearComentario(nick:string, comentario:string) {\n    const sqlId =\n    `Select idPersona from Persona where nick=?`\n     this.executeSentence(this.id, sqlId, [nick]);\n\n    const sql =\n      \"INSERT INTO Comentario (idPersona, Comentario) VALUES (?,?);\";\n    return this.executeSentence([], sql, [this.id[0], comentario]);\n  }\n\n\n  agregarAmigo(personaUsuario:string, personaAmiga:string) {\n    const sql =\n    `INSERT INTO Amigos (idPersonaUsuario, idPersonaAmiga) VALUES\n    ((Select Persona.idPersona From Persona where Persona.nick=\"${personaAmiga}\"),(Select Persona.idPersona From Persona where Persona.nick=\"${personaUsuario}\"))`;\n    return this.executeSentence([], sql, []);\n  }\n\n  agregarAmigoDos(personaUsuario:string, personaAmiga:string) {\n    const sql =\n    `INSERT INTO Amigos (idPersonaUsuario, idPersonaAmiga) VALUES\n     ((Select Persona.idPersona From Persona where Persona.nick=\"${personaUsuario}\"),(Select Persona.idPersona From Persona where Persona.nick=\"${personaAmiga}\"))`;\n    return this.executeSentence([], sql, []);\n  }\n\n  eliminarAmigo(personaUsuario:string, personaAmiga:string){\n    const sql=`Delete From Amigos where Amigos.idPersonaUsuario=(Select Persona.idPersona From Persona where Persona.nick=\"${personaUsuario}\")\n     and Amigos.idPersonaAmiga=(Select Persona.idPersona From Persona where Persona.nick=\"${personaAmiga}\")`;\n     return this.executeSentence([],sql,[]);\n  }\n\n  eliminarAmigoDos(personaUsuario:string, personaAmiga:string){\n    const sql=`Delete From Amigos where Amigos.idPersonaUsuario=(Select Persona.idPersona From Persona where Persona.nick=\"${personaAmiga}\")\n    and Amigos.idPersonaAmiga=(Select Persona.idPersona From Persona where Persona.nick=\"${personaUsuario}\")`;\n    return this.executeSentence([],sql,[]);\n  }\n\n  mostrarTodosLosUsuarios(nick:string){\n    return new Promise<any>((resolveUno, rejectUno) => {\n    const sql=`Select Persona.Nick \n               from Persona \n               where Persona.Nick!=\"${nick}\"`\n      this.verUsers=[];\n      this.executeSentence(this.verUsers, sql, []).then((data)=>{resolveUno(data)}).catch();\n    })\n  }\n\n  mostrarAmigos(nick:string){\n    //A revisar mañana en clase\n    return new Promise<any>((resolveUno, rejectUno) => {\n    const sql= `Select Persona.Nick as mostrar\n                from Persona \n                where Persona.idPersona in (Select Amigos.idPersonaAmiga \n                                            From Persona,Amigos \n                                            where Persona.Nick=\"${nick}\" and Persona.idPersona=Amigos.idPersonaUsuario)`\n      this.verAmigos=[];\n      this.executeSentence(this.verAmigos, sql, []).then((data)=>{resolveUno(data)}).catch();\n      console.log(this.verAmigos)\n    })\n  }\n\n  async crearBBDD() {\n    await this.platform\n      .ready()\n      .then(async () => {\n        console.log('la plataforma está lista');\n\n        await this.sqlite\n          .create(this.getConector())\n          .then((db: SQLiteObject) => {\n            this.db = db;\n            console.log('ya tenemos nuestra BBDD');\n            console.log('------');\n          })\n          .catch((e) => console.log(e));\n      })\n      .catch((err) => {\n        console.log('la plataforma no esta lista');\n        console.log('Error debido a: ' + err);\n      });\n  }\n  private getConector() {\n    return {\n      name: 'CaraLibro.db',\n      location: 'default',\n      createFromLocation: 1,\n    };\n  }\n\n  // getFamiliaList() {\n  //   return this.familiaList;\n  // }\n\n    getverCorreoNick(){\n      return this.verCorreoNick[0];\n    }\n\n    getverLogin(){\n      return this.verLogin[0];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { SqliteDbCopy } from '@ionic-native/sqlite-db-copy/ngx';\nimport { Platform } from '@ionic/angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BbddcopyService {\n\n  constructor(private platform: Platform, private sqliteDbCop: SqliteDbCopy) {}\n  async copiarBBDD(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.platform\n        .ready()\n        .then(() => {\n          this.sqliteDbCop\n            .copy(\"CaraLibro.db\", 0)\n            .then(() => {\n              resolve(\"Copia terminada\");\n            })\n            .catch((error) => {\n              reject(error);\n            });\n        })\n        .catch(() => {});\n    });\n  }\n}\n","import { AbstractControlOptions, AsyncValidatorFn, FormControl, ValidatorFn } from '@angular/forms';\nexport class MyFormControl extends FormControl {\n  validationMessages = new Map<string, string>();\n  constructor(formState?: any, validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null){\n    super(formState,validatorOrOpts,asyncValidator)    \n  };\n\n  public insertValidationMessage(error: string, message: string) {\n    this.validationMessages.set(error, message);\n  }\n\n  public getValidationMessage(error: string): string {\n    return this.validationMessages.get(error);\n  }\n  \n}\n","import { MyFormControl } from './myFormControl';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\nexport class MyFormGroup {\n  private _formGroup: FormGroup;\n  // private myMap = new Map<string, FormControl>();\n  // private nameMap = new Map<string, string>();\n\n  constructor(\n    private nameFields: string[],\n    private nameControl: string[],\n    private formControls: MyFormControl[]\n  ) {\n    this._formGroup = new FormGroup({});\n    for (let index = 0; index < nameFields.length; index++) {\n      this.formGroup.addControl(nameControl[index], formControls[index]);\n    }\n  }\n\n  public insertarValidationMessages(\n    nameControl: string,\n    errors: string[],\n    messages: string[]\n  ) {\n    let control = this.getControl(nameControl);\n    for (let index = 0; index < errors.length; index++) {\n      control.insertValidationMessage(errors[index], messages[index]);\n    }\n  }\n\n  insertarControl(key: string, value: FormControl) {\n    this.formGroup.addControl(key, value);\n  }\n\n  public getControl(key: string): MyFormControl {\n    let retorno=this.formGroup.get(key);\n    return <MyFormControl> retorno;\n  }\n\n  public get formGroup(): FormGroup {\n    return this._formGroup;\n  }\n}\n"],"sourceRoot":"webpack:///"}